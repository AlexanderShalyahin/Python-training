#405. Створіть список на основі введеної послідовності цілих чисел і надрукуйте другу половину списку як у вихідних даних.
# lst = [7, 2, 1, 0, 4, 2]
# print(lst[lst.index(0):])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#406. Створіть список на основі введеної послідовності цілих чисел і надрукуйте його елементи таким чином:
# два останні елементи переміщені з кінця в початок списку без зміни їх початкового порядку.
# lst = [4, 10, 2, 9, 4, 7, 3]
# print(lst[-2:] + lst[:-2])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#407. Збережіть назви мов світу, які вводяться в одному рядку через пропуск, у списку.
# Простежте за тим, щоб елементи у списку не зберігались в алфавітному порядку.
# Відсортуйте список в алфавітному порядку і виведіть його елементи в рядку через пропуск.
# lst = ['Ukrainian','French', 'Bulgarian', 'Norwegian', 'Latvian']
# lst.sort()
# g = ', '.join(lst)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 408. Збережіть назви мов світу, які вводяться в одному рядку через пропуск, у списку.
# Простежте за тим, щоб елементи у списку не зберігались в алфавітному порядку.
# Відсортуйте список в порядку протилежному алфавітному і виведіть його елементи в рядку через пропуск.
# lst = ['Ukrainian','French', 'Bulgarian', 'Norwegian', 'Latvian']
# lst.sort(reverse=True)
# g = ' '.join(lst)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#410.. Виведіть елементи даного списку в зворотному порядку, не змінюючи сам список.
# lst = [2, 6, 1, 7, 9]
# print(lst[::-1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#411. Виведіть всі елементи списку з парними індексами. Вводиться список чисел. Всі числа списку знаходяться на одному рядку.
# lst = [1, 2, 3, 4, 5]
# print(lst[::2])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#412. Напишіть програму, яка роздруковує лише ті елементи введеного списку, що менше введеного значення n. Список містить унікальні значення.
# lst = [2, 7, 11, 3, 8, 90, 144, 15, 5]
# n = 94
# print(lst)
# lst_f = []
# for i in lst:
#     if i < n:
#         lst_f.append(i)
# print(lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#413. Виведіть всі парні елементи списку. Вводиться список чисел. Всі числа списку знаходяться на одному рядку.
# lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
# lst_f = []
# print(lst)
# for i in lst:
#     if i%2 == 0:
#         lst_f.append(i)
# print(lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#414. Знайдіть кількість додатних елементів у введеному списку. Вводиться список чисел. Всі числа списку знаходяться на одному рядку.
# lst = [2, -4, 5, 6, -3]
# print(lst)
# count = 0
#
# for i in lst:
#     if i > 0:
#         count += 1
#
# print(count)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#415. Виведіть всі елементи списку з непарними індексами. Вводиться список чисел, елементи якого розділені комами без пропусків.
# Всі числа списку знаходяться на одному рядку. Необхідно вивести список в одному рядку і елементи списку мають бути розділені комами без пропусків.
# lst = [1,2,3,4,5,6,7,8,9]
# print(lst)
# lst_f = []
# for i in lst:
#     if lst.index(i)%2 == 1:
#         lst_f.append(str(i))
# g = ','.join(lst_f)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#416. Вводиться список чисел. Всі числа списку знаходяться на одному рядку.
# Виведіть ті його елементи, які зустрічаються в списку лише один раз.
# Елементи потрібно виводити в тому порядку, в якому вони зустрічаються в списку.
# lst = [4, 5, 6, 1, 6, 6, 5, 4, 4, 7, 4, 3]
# print(lst)
# lst_f = []
#
# for i in lst:
#     if lst.count(i) == 1:
#         lst_f.append(i)
# print(lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#417. Вводиться список чисел. Всі числа списку знаходяться в одному рядку. Обчисліть, скільки у списку різних елементів, не змінюючи самого списку.
# lst = [5, 7, 7, 9, 12]
# print(lst)
# lst_f = []
#
# for i in lst:
#     if i not in lst_f:
#         lst_f.append(i)
# print(len(lst_f))
#
#
# lst = [5, 7, 7, 9, 12]
# print(len(set(lst)))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#418. Напишіть програму для доступу до індексу цілочисельних елементів списку. Числа списку вводяться на одному рядку через пропуск.
# lst = [3, 44, 6, 8, 9, 12, 7]
# for i in lst:
#     print(lst.index(i), i)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#419. Вводиться список чисел. Всі числа списку знаходяться в одному рядку.
# Не змінюючи його і не використовуючи додаткові списки, визначте, яке число в цьому списку зустрічається найчастіше.
# Якщо таких чисел декілька, виведіть будь-яке з них.
# lst = [2, 4, 6, 9, 9,9, 9, 9, 9, 9,  2, 3, 2, 4, 4, 4, 4]
# print(lst)
# cou = 0
# for i in lst:
#     if lst.count(i) > cou:
#         cou = i
#         print(cou, i)
#
# print(cou)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#420. Вводиться список цілих чисел в одному рядку через пропуск.
# Надрукуйте всі елементи, які перевищують попередній елемент списку, через пропуск в новому рядку в порядку їх розміщення у списку.
# lst = [5, 8, 0, 2, 9, 4, 1]
# print(lst)
# count = lst[0]
# lst_f = []
# for i in lst:
#     if i > count:
#         lst_f.append(i)
#     count = i
# print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#421. Вводиться список цілих чисел в одному рядку через пропуск.
# Надрукуйте кількість елементів, які є за значенням більші за обох їх сусідів.
# Перший і останній елементи списку не слід розглядати, оскільки вони не мають двох сусідів.
# lst = [1, 3, 2, 4, 2]
# print(lst)
# count = 0
#
# for i in range(1, len(lst)-1):
#     if lst[i-1] < lst[i] > lst[i+1]:
#         count += 1
#
# print(count)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#422. Напишіть програму, яка отримує повне ім’я файлу від користувача та друкує на екрані розширення отриманого файлу.
# s = 'test.cpp'
#
# print(s.split('.')[1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#423. Напишіть програму розрахунку суми цілих чисел, які вводяться користувачем в одному рядку через пропуск. Цикл використовувати не можна.
# lst = [1, 5, 9, 5, 2, 8]
# print(sum(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#424. Визначте, скільки різних слів у введеному рядку.
# s = 'Happy New Year Happy New Year May we all have a vision now and then Of a world where every neighbor is a friend'
# lst= s.split()
# lst_f = []
# for i in lst:
#     if i not in lst_f:
#         lst_f.append(i)
# print(len(lst_f))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#425. Напишіть програму, яка отримує два цілих числа в одному рядку через пропуск і виводить ці числа аналогічним чином, помінявши їх місцями.
# s = '101 56'
# lst = s.split()
# lst.reverse()
# print(*lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#426. Вводиться дробове число. Надрукувати окремо цифри цілої частини і дробової. Розділювачем є десяткова крапка.
# n = 12.567
# lst = str(n).split('.')
# print(*lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#427. Створіть програму, яка отримує на вхід послідовність цілих чисел, і друкує на екрані:
# найменше число у списку,
# найбільше число у списку,
# кількість чисел у списку,
# середнє значення елементів у списку.
# lst = [1, 3, 7, 5]
# print(min(lst))
# print(max(lst))
# print(len(lst))
# print(sum(lst) / len(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#428. Напишіть програму, яка приймає послідовність чисел, розділених комами, від користувача і створює список і кортеж з цими числами.
# s = '7, 9, 12, 4'
#
# lst = []
#
# for i in s.split(', '):
#     lst.append(int(i))
#
# print(lst)
# print(tuple(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#429. Напишіть програму для підрахунку кількості днів, в яких температура була не нижче, ніж середня температура за весь період.
# У першому рядку вводиться список показників температури на кожен день.
# У рядку виведення одне число - кількість днів, які відповідають умові.
# lst = [-3, -1, 0, 2, 6, 8, 12, 15]
# count_day = 0
#
# ser = round(sum(lst) / len(lst))
#
# for i in lst:
#     if i > ser:
#         count_day += 1
#
# print(count_day)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#430. Напишіть програму для підрахунку кількості цілих чисел n,
# які вводяться користувачем (значення вводяться через пропуск в одному рядку, число n вводиться у новому рядку).
# s = input('Enter numbers: ')
# n = input('enter: ')
#
# print(s.split().count(n))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#431. Напишіть програму для друкування всіх парних чисел із введеного списку чисел у тому ж порядку і припиніть друк,
# якщо у списку буде число n або нуль. Значення списку вводяться через пропуск в одному рядку, число n вводиться у новому рядку.
# lst = [1, 8, 9, 10, 4, 0, 4, 2, 5, 6]
# n = 2
# lst_f = []
#
# for i in lst:
#     if i == 0 or i == n:
#         break
#     elif i%2 == 0:
#         lst_f.append(i)
#
# print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#432. Напишіть програму, щоб перевірити, чи певне ціле число n перевищує всі елементи цілочисельного списку.
# Значення списку вводяться через пропуск в одному рядку, число n вводиться у новому рядку.
# num = '4 67 109 25 44 12'
# n = 99
#
# lst_num = []
#
# for i in (num.split()):
#     lst_num.append(int(i))
#
# for i in lst_num:
#     if i > n:
#         print(i < n)
#         break
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#433. Цілі числа (додатні і від’ємні) вводяться через пропуск в одному рядку. Напишіть програму для друку списку лише із введених додатних чисел.
# s = '0 9 -4 6 8 -15 4'
# lst = []
#
# for i in s.split():
#     if int(i) > 0:
#         lst.append(int(i))
#
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#434. Напишіть програму для отримання частини рядка URL, що позначає назву ресурсу.
# s = 'https://www.namesite.com/folder/index.html'
# lst = s.split('/')
# print(lst[-1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#435. Напишіть програму для отримання найменшого цілого числа зі списку. Значення списку вводяться через пропуск в одному рядку.
# s = '87 6 25 7 105 23 56'
# lst = []
#
# for i in s.split():
#     lst.append(int(i))
#
# print(min(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#436. Напишіть програму для знаходження другого найменшого елемента у цілочисельного списку.
# Значення списку вводяться через пропуск в одному рядку.
# s = '20 56 14 9 1 15'
# lst = []
#
# for i in s.split():
#     lst.append(int(i))
# print(lst, 'main')
#
# lst.sort()
# print(lst[1])
# # or like this
# del lst[lst.index(min(lst))]
# print(min(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#437. Напишіть програму для перетворення списку декількох цілих чисел у єдине ціле число.
# Значення списку вводяться через пропуск в одному рядку.
# s = '1 7 9 4'
# lst = s.split()
# g = int(''.join(lst))
# print(type(g), g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#438. Написати програму, яка обчислює середнє арифметичне елементів списку.
# Середнім арифметичним кількох чисел називається їх сума, поділена на їх кількість.
# Результат округлити до двох знаків після десяткової крапки.
# lst = [3, 5, 1, 8, 4]
# f = sum(lst) / len(lst)
# print(f'{f:.2f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#439. Напишіть простий інтерпретатор математичного виразу.
# На вхід подається рядок з виразом, що складається з двох чисел (0 ≤ a, b ≤ 1000), об’єднаних бінарним оператором:
# a operator b, де замість operator можуть використовуватися такі слова: plus, minus, multiply, divide для, відповідно,
# додавання, віднімання, множення і цілочисельного ділення. Результат обчислення - рядок, що містить ціле число.
# s = '49 divide 7'
# lst = []
#
# for i in s.split():
#     if i.isnumeric():
#         lst.append(int(i))
# print(lst)
#
# if s.split()[1] == 'plus':
#     print(lst[0] + lst[1])
# elif s.split()[1] == 'minus':
#     print(lst[0] - lst[1])
# elif s.split()[1] == 'multiply':
#     print(lst[0] * lst[1])
# elif s.split()[1] == 'divide':
#     print(lst[0] // lst[1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#440. Знайти відстань між двома точками із заданими координатами (x1, y1, x2, y2) в 2-вимірному просторі.
# Значення координат є цілими числами. Результат округлити до двох знаків після десяткової крапки.
# x1 = 2
# y1 = 3
#
# x2 = -7
# y2 = 4
#
# d = ((x2-x1)**2 + (y2 - y1)**2)**0.5
#
# print(f'{d:.2f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#441. Дано список цілих чисел. Визначте елемент у списку з найбільшим значенням.
# Надрукувати значення найбільшого елемента, а потім номер індексу.
# Якщо найбільший елемент не є унікальним, надрукуйте індекс першого входження найбільшого елемента.
# lst = [2, 5, 10, 0, 4, 7, 11, 11, 5, 8]
#
# print(max(lst), lst.index(max(lst)))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#442. Дано послідовність цілих чисел. Визначте, у відсортованому за зростанням списку, кількість елементів, що не повторюються один за одним.
# lst = [1, 9, 10, 3, 7, 5, 2, 2, 3, 0, 4, 5, 6]
# print(lst)
# lst.sort()
# lst_f = []
# for i in lst:
#     if i not in lst_f:
#         lst_f.append(i)
#
# print(len(lst_f))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#443. Циклічно посуньте елементи списку вправо (0-вий елемент переходить на місце 1-го, 1-ий на місце 2-го, ...,
# останній елемент переходить на місце 0-го). Вводиться список чисел. Всі числа списку знаходяться на одному рядку.
# lst = [2, 0, 2, 5]
# print(lst)
# print(*(lst[-1:] + lst[:-1]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#444.Напишіть програму, яка приймає послідовність слів, розділених комами і без пропусків в якості введення,
# і друкує послідовність слів, розділених комами, після сортування за алфавітом.
# s = 'one,moment,please'
# print(s)
# f = s.split(',')
# f.sort()
# g = ','.join(f)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#445. Для введеної послідовності унікальних цілих чисел, поміняйте місцями мінімальний та
# максимальний елементи цієї послідовності. Надрукуйте отриманий список.
# lst = [1, 9, 12, 5, 3, 8]
# print(*lst)
# a = max(lst)
# b = min(lst)
#
# lst_f = []
#
# for i in lst:
#     if i == a:
#         lst_f.append(b)
#     elif i == b:
#         lst_f.append(a)
#     else:
#         lst_f.append(i)
# print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#446. Дано список чисел, підрахуйте, скільки пар елементів мають однакове значення (рівні).
# Будь-які два елементи, що дорівнюють один одному, слід вважати рівно один раз.
# lst = [1, 2, 2, 2, 3, 3, 4]
# count = 0
#
# for i in range(len(lst)):
#     for w in range(i+1, len(lst)):
#         if lst[i] == lst[w]:
#             count += 1
#
# print(count)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#447. Напишіть програму, яка приймає послідовність рядків (порожній рядок для завершення програми) як вхідний рядок і друкує рядки у верхньому регістрі.
# lst = []
# while True:
#     s = input('enter: ')
#     if s == '':
#         break
#     lst.append(s)
#
# for i in lst:
#     print(i.upper())
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 448. Для введеної послідовності цілих чисел обміняйте сусідні елементи у парах (A[0] з A[1], A[2] з A[3] і т. д.).
# Надрукуйте отриманий список. Якщо в списку є непарне число елементів, залиште останній елемент на місці.
# lst = [1, 4, 5, 3, 7]
# print(lst)
# lst_f = []
#
# while lst:
#     if len(lst) == 1:
#         lst_f.append(lst.pop(0))
#     else:
#         lst_f.append(lst.pop(1))
#         lst_f.append(lst.pop(0))
#
# print(lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#449. Для списку цілих чисел знайдіть і надрукуйте елементи, які з’являються у списку лише один раз.
# Елементи повинні бути роздруковані у тому порядку, в якому вони перебувають у вхідному списку.
# lst = [5, 3, 1, 6, 5, 8, 0, 12]
# print(*lst)
# lst_f = []
#
# for i in lst:
#     if lst.count(i) == 1:
#         lst_f.append(i)
#
# print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#450. У введеному списку цілих чисел, знайдіть і надрукуйте сусідні елементи, які мають однаковий знак. Якщо такої пари немає, не повинно нічого виводитися.
# lst = [1, -2, -3, 5, 6, -3, 7, 8]
#
# for i in range(len(lst)):
#     try:
#         if lst[i] > 0 and lst[i+1] > 0:
#             print(lst[i], lst[i+1])
#         if lst[i] < 0 and lst[i+1] < 0:
#             print(lst[i], lst[i+1])
#         else:
#             continue
#     except:
#         break
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#451. Напишіть програму, яка зчитує числа (по одному в рядку) до тих пір, поки сума введених чисел не буде дорівнює 0 і
# відразу після цього виводить суму квадратів всіх чисел.
# Гарантується, що в якийсь момент сума введених чисел дорівнюватиме 0, після цього зчитування продовжувати не потрібно.
# lst = []
# lst_f = []
# num = int(input('Enter: '))
# lst.append(num)
#
# while sum(lst) != 0:
#     num = int(input('enter: '))
#     lst.append(num)
#
# for i in lst:
#     lst_f.append(i**2)
#
# print(sum(lst_f))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#452. Напишіть програму для обчислення добутку цілих чисел (без використання циклу for), які вводяться через пропуск користувачем в одному рядку.
# s = '2 5 3 2 2'
# lst = s.split()
# print(*lst)
# lst_f = []
#
# while lst:
#     if len(lst_f) == 0:
#         lst_f.append(int(lst[0]))
#         del lst[0]
#     elif len(lst) > 0:
#         lst_f.append(lst_f[-1] * int(lst[0]))
#         del lst[0]
#
# print(lst_f[-1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#453. Написати програму, яка приймає на вхід послідовність з цілих чисел, після чого друкує значення всіх її елементів, піднесені до квадрату.
# lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# print(*lst)
#
# for i in range(len(lst)):
#     lst[i] = lst[i] ** 2
#
# print(*lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#454.Напишіть програму для друку елементів певного цілочисельного списку після видалення з нього парних чисел.
# Значення списку вводяться через пропуск в одному рядку.
# s = '3 44 6 8 9 12 7'
# lst = []
# for i in s.split():
#     lst.append(int(i))
# print(*lst)
# lst_f = []
#
# for i in lst:
#     if i % 2 == 1:
#         lst_f.append(i)
#
# print(lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#455. Дано дві цілочисельні послідовності, елементи яких розділені пропуском і комою.
# Напишіть програму, яка повертає послідовність, що містить лише елементи, які є загальними між введеними послідовностями (без дублікатів).
# Переконайтеся, що ваша програма працює на двох послідовностях різних розмірів.
# a = '1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89'
# b = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13'
#
# a_lst = []
# for i in a.split(', '):
#     a_lst.append(int(i))
#
# b_lst = []
# for i in b.split(', '):
#     b_lst.append(int(i))
#
# lst_f = []
#
# for i in a_lst:
#     if i in b_lst and i not in lst_f:
#         lst_f.append(i)
#
# print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#456. Напишіть програму, яка приймає послідовність 4-цифрових двійкових чисел, розділених комами, і друкує числа,
# які ділиться на 5 без остачі, в рядку і розділені комами.
# s = '0100,0011,1010,1001,1100'
# lst = []
#
# for i in s.split(','):
#     lst.append(i)
# print(lst)
#
# lst_f = []
#
# for i in range(len(lst)):
#     if int(lst[i], 2) % 5 == 0:
#         lst_f.append(int(lst[i]))
#
# print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 457. Напишіть програму для знаходження медіани з трьох введених цілих чисел. Числа вводяться в одному рядку через пропуск.
# s = '25 50 11'
# lst = []
# for i in s.split():
#     lst.append(int(i))
# print(sorted(lst)[1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#458. Вводиться три числа, через кому і пропуск, що позначають день, місяць і рік.
# Надрукуйте дату у форматі як у вихідних даних, не використовуючи цикл і звернення до елементів за індексом.
# s = '4, 3, 2019'
# print(s)
# lst = s.split(', ')
# g = '/'.join(lst)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#459. Програма отримує на вхід спадаючу послідовність натуральних чисел, що позначають значення зросту учнів.
# Після цього вводиться число - зріст учня, який має зайняти місце серед усіх інших.
# Всі числа у вхідних даних натуральні і не перевищують 200.
# Виведіть номер місця, яке має зайняти новий учень.
# Якщо є учні з однаковим зростом, таким же, як і у нового учня, то він повинен встати після них.
# lst = [165, 163, 160, 160, 157, 157, 155, 154]
# f = 160
# lst_f = []
#
# for i in lst:
#     if i >= f:
#         lst_f.append(i)
#
# lst_f.append(f)
# print(len(lst_f))
#
#
# lst = [165, 163, 160, 160, 157, 157, 155, 154]
# f = 160
#
# position = 1
#
# for i in lst:
#     if i >= f:
#         position += 1
#     else:
#         break
# print(position)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#460. Вводиться список цілих чисел. Всі числа списку знаходяться на одному рядку. У списку всі елементи різні.
# Поміняйте місцями мінімальний і максимальний елементи цього списку.
# lst = [5, 6, 8, 1, 4, 9, 12]
# print(*lst)
#
# n_min = min(lst)
# n_max = max(lst)
#
# for i in range(len(lst)):
#     if lst[i] == n_min:
#         lst[i] = n_max
#     elif lst[i] == n_max:
#         lst[i] = n_min
#
# print(*lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#461. Ви вирішили написати перетворювач коду на Python в код на Java.
# Так як на Java прийнятий стандарт найменування CamelCase, то ви вирішили навчитися перетворювати імена з underscore в цей формат.
# Стиль underscore характеризується тим, що слова в імені пишуться маленькими літерами і розділяються між собою символом підкреслення _.
# Стиль CamelCase означає, що кожне слово пишеться з великої літери і роздільників між словами немає.
# Отже, вводиться один рядок, що містить ім’я, записане в форматі underscore.
# Програма виводить рядок, що містить ім’я в форматі CamelCase.
# s = 'my_class'
# lst = []
#
# for i in s.split('_'):
#     lst.append(i.title())
#
# g = ''.join(lst)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#462. Напишіть програму, яка обчислює частку студентів, які отримали оцінку A.
# Використовується п’ятибальна система оцінювання з оцінками A, B, C, D, F.
# Вводиться рядок, в якому через пропуск записані оцінки студентів.
# Оцінок завжди не менш однієї.
# Виводиться дробове число з рівно двома знаками після коми.
# s = 'A B A A B C A D F'
# lst = s.split()
# print(lst)
# count_a = 0
#
# for i in lst:
#     if i == 'A':
#         count_a += 1
#
# print(f'{count_a / len(lst):.2f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#463. У якийсь момент вам набридло використовувати імена файлів з пропусками і ви вирішили написати програму,
# яка перейменовує всі файли, що містять пропуски в імена, у яких групи прогалин замінено на символ підкреслення _.
# Програма отримує один рядок, що містить довільні символи, в тому числі і пропуски, і виводить правильну назву із символом підкреслення замість пропусків.
# s = 'string     with        multi spaces'
# lst = []
#
# for i in s.split():
#     lst.append(i)
#
# g = '_'.join(lst)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#464.На вхід програми подається деякий текст в одному рядку з пропусками.
# Необхідно знайти у тексті слово під певним номером (наприклад, п’яте слово за рахунком) і вивести на екран його першу букву.
# s = 'Now is better than never'
# n = 3
#
# lst = []
#
# for i in s.split():
#     lst.append(i)
#
# print(lst[n-1][0])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#465. Дано список з чисел та індекс елемента в списку k.
# Видаліть зі списку елемент з індексом k, зсунувши вліво всі елементи, що стоять правіше елемента з індексом k.
# Програма отримує на вхід список, потім число k. Програма повинна здійснювати зміщення безпосередньо в списку,
# а не робити це при виведенні елементів. Також не можна використовувати додатковий список.
# lst = [5, 7, 9, 0, 3, 11]
# k = 3
#
# del lst[3]
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#466. Дано список цілих чисел, число k і значення c.
# Необхідно вставити у список на позицію з індексом k елемент, рівний c, зсунувши всі елементи вправо.
# Вставку необхідно здійснювати у самому списку, не роблячи цього при виведенні і не створюючи додаткового списку.
# Вводиться список чисел. Всі числа списку знаходяться на одному рядку. У наступному рядку вводяться два цілих числа.
# lst = [9, 4, 6, 2, 0, 7, 14]
# n = '3 0'
# print(lst)
#
# lst.insert(int(n[0]), int(n[-1]))
#
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#467. Напишіть програму для перетворення двійкового числа в десяткове число.
# n = 1001
#
# print(int(str(n), 2))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#468. Напишіть програму для видалення кожного третього елемента із цілочисельного списку і друку результуючого списку,
# доки список не стане порожнім. Початковий список цілих чисел вводиться в одному рядку через пропуск.
# lst = [2, 5, 8, 9, 4, 78, 7, 1]
# print(lst)
# while lst:
#     if len(lst) >= 3:
#         del lst[2]
#         print(lst)
#     elif len(lst) < 3:
#         del lst[0]
#         print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#469. Необхідно зчитати рядок з цифр, розділених пропусками, і зберегти кожну цифру у список.
# Створіть копію списку із впорядкованими елементами у зворотному порядку.
# Виведіть число, яке утворюється об’єднанням елементів нового списку.
# s = '1 4 8 3 9 5'
# lst = []
#
# for i in s.split():
#     lst.append(i)
# print(lst)
#
# lst_f = sorted(lst, reverse=True)
#
# g = ''.join(lst_f)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#470. Дано послідовність цілих чисел, яка вводиться в рядку через пропуск.
# Визначте два найменших елемента послідовності.
# Вони можуть бути як рівні між собою (обидва бути мінімальними), так і відрізнятися.
# s = '14 3 40 56 42 43 89 69 64 72 5 44 11 25'
# lst = []
#
# for i in s.split():
#     lst.append(int(i))
# lst.sort()
# print(*lst[:2])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#471. Розташувати додатні і від’ємні числа введеної послідовності цілих чисел на початку списку і
# у кінці списку відповідно (за спаданням). Числа, рівні нулю, ігнорувати. Вивести на екран результуючий список.
# lst = [1, 3, -5, 0, 10, -2, 12, 45, 7, 0, 9, -4, -11, 15, 22, 3]
# print(lst)
#
# for i in lst:
#     if i == 0:
#         lst.remove(i)
#
# lst.sort(reverse=True)
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#472. Дано список слів. Напишіть програму, яка виконає заміну останніх трьох символів слів, що мають певну довжину, на певний символ.
# Користувач відповідно вводить наступні дані: кількість слів у списку, довжину слів, які будуть редагуватися,
# символ заміни останніх тьох символів і сам список слів (кожне слово в окремому рядку).
# Гарантовано, що довжина слів у списку щонайменше 3 символи.
# num_of_words = int(input('Enter a number of words: '))
# num_of_letters = int(input('How many letter: '))
# simbol = input('Enter a simbol: ')
#
# lst = []
#
# while len(lst) < num_of_words:
#     word = input('Enter a word: ')
#     lst.append(word)
# print(lst)
#
# for i in range(len(lst)):
#     if len(lst[i]) > num_of_letters:
#         lst[i] = lst[i][:-3] + simbol
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#473. Користувач вводить два цілих додатних числа n і m. Напишіть програму,
# яка створює двовимірний масив розміром n x m і заповнює його символами . і * у шаховому порядку (як у вихідних даних).
# Лівий верхній кут повинен мати символ ..
# n = 6
# m = 8
#
# lst = []
# for row in range(n):
#     lst_col = []
#     for col in range(m):
#         if (row + col) % 2 == 0:
#             lst_col.append('.')
#         else:
#             lst_col.append('*')
#     lst.append(lst_col)
# print(lst)
#
# for col in lst:
#     print(*col)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#474. Вводиться непарне натуральне число n. Напишіть програму, яка створює зображення сніжинки за допомогою
# двовимірного масиву розміром n x n. Заповніть кожен елемент символом ..
# Потім заповніть середній рядок, середній стовпець і діагоналі символом *. Розділяйте символи одним пропуском.
# n = 7
# a = '*'
#
# lst_col = []
# lst_col_center = []
# lst_col_reverse = []
#
# for row in range(n//2):
#     lst_f = list('.' * (n // 2))
#     del lst_f[row]
#     lst_f.insert(row, a)
#     lst_col.append(lst_f + list(a) + lst_f[::-1])
#
# f = []
# for row in (a * n):
#     f.append(row)
# lst_col_center.append(f)
#
# for row in range(len(lst_col)-1, 0-1, -1):
#     lst_col_reverse.append(lst_col[row])
#
# for i in (lst_col + lst_col_center + lst_col_reverse):
#     print(*i)
#*********************************************************************************************************************
# n = 7
#
# snowflake = []
#
# for i in range(n):
#     i = []
#     for w in range(n):
#         i.append('.')
#     snowflake.append(i)
#
# for i in range(n):
#     snowflake[i][i] = '*'        # діагональ з верх. лівого до ниж. правого
#     snowflake[i][n - i -1] = '*' # діагональ з верх. правого до ниж. лівого
#     snowflake[i][n//2] = '*'     # вертикаль
#     snowflake[n//2][i] = '*'     # горизонталь
#
# for i in snowflake:
#     print(*i)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#475. Напишіть програму, яка приймає на вхід список чисел в одному рядку і виводить на екран в один рядок значення,
# які повторюються в ньому більш ніж один раз. Виведені числа не повинні повторюватися, порядок їх виведення маж бути за зростанням.
# lst = [5, 8, 1, 3, 5, 2, 1, 3, 0]
#
# lst_f = []
#
# for num in lst:
#     if lst.count(num) > 1:
#         if num not in lst_f:
#             lst_f.append(num)
#
# if len(lst_f) == 0:
#     print('нема повторювальних елементів')
# else:
#     lst_f.sort()
#     print(*lst_f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#476. Напишіть програму, яка приймає 2 цілих числа, a і b і генерує двовимірний масив.
# Значення елемента в i-му рядку і j-му стовпці масиву має бути i * j (i = 0,1...,a-1; j = 0,1..., b-1).
# a = 3
# b = 5
#
# lst = []
#
# for i in range(a):
#     i_lst = []
#     for w in range(b):
#         i_lst.append(i * w)
#     lst.append(i_lst)
# print(lst)
#
# for i in lst:
#     print(*i)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#477. Для введеної послідовності цілих чисел, вивести їх у списку так, щоб парні елементи розташовувалися на початку списку, а непарні - в кінці.
# s = '2 5 7 8 9 10 12 32 5'
#
# lst = []
# paired_elements = []
# odd_elements = []
#
# for i in s.split():
#     if int(i) % 2 == 0:
#         paired_elements.append(int(i))
#     else:
#         odd_elements.append(int(i))
#
# print(*(paired_elements + odd_elements))
#
# paired_elements.sort(reverse=True)
# odd_elements.sort()
#
# print(*(paired_elements + odd_elements))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#478. Напишіть програму, яка обчислює суму на банківському рахунку на основі журналу транзакцій.
# Формат журналу транзакцій відображається наступним чином:
# D 100
# W 200
# де D – покласти на депозит ціле значення суми, а W - вилучити. Введення транзакцій завершується порожнім рядком.
# lst = []
#
# while True:
#     money = input('enter: ')
#
#     if money == '':
#         break
#
#     if money.startswith('D'):
#         x = money.split()
#         lst.append(int(x[1]))
#     elif money.startswith('W'):
#         x = money.split()
#         lst.append(-int(x[1]))
#
# print(sum(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#479. Робот може рухатися, починаючи від початкової точки (0, 0), вгору, вниз, вліво та вправо за допомогою кроків, наприклад:
# UP 5
# DOWN 3
# LEFT 3
# RIGHT 2
# Назви вказують напрямок, а цифри позначають кількість кроків.
# Введення порожнього рядка завершує рух робота. Напишіть програму для обчислення відстані від поточної позиції робота до початкової точки.
# x1 = 0
# y1 = 0
# x2 = []
# y2 = []
#
# while True:
#     stap = input('enter your move: ')
#
#     if stap == '':
#         break
#
#     if stap.startswith('UP'):
#         x = stap.split()
#         y2.append(int(x[1]))
#     elif stap.startswith('DOWN'):
#         x = stap.split()
#         y2.append(-int(x[1]))
#     elif stap.startswith('RIGHT'):
#         x = stap.split()
#         x2.append(int(x[1]))
#     elif stap.startswith('LEFT'):
#         x = stap.split()
#         x2.append(-int(x[1]))
#
# x2 = sum(x2)
# y2 = sum(y2)
#
# result = ((x2 - x1)**2 + (y2 -y1)**2)**0.5
#
# print('You are hear - ', round(result))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#480. Дано список назв міст світу, перерахованих в рядку через кому.
# Сформуйте з елементів списку повідомлення, у якому перед останнім елементом буде вставлено слово and так, як у вихідних даних.
# Програма має працювати з будь-якими списками, які мають довільну довжину, відмінну від нуля.
# sities = 'Budapest, Rome'
# siti = sities.split(', ')
#
# if len(siti) > 1:
#     print(f'{', '.join(siti[:-1])} and {siti[-1]}')
# else:
#     print(siti[0])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#481. У рядку через кому перераховані слова. Сформувати з цих слів новий рядок.
# Слова мають бути відсортовані за спаданням (від Z до A) без урахування регістру і записані через пропуск.
# animals = 'horse, cat, parrot, goldfish, dog'
#
# lst_animals = animals.split(', ')
# lst_animals.sort(reverse=True)
#
# print(' '.join(lst_animals))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#482. Дано послідовність цілих чисел, які записані в одному рядку через пропуск.
# Утворіть і надрукуйте голову (перший елемент) і хвіст (усі інші елементи) вказаної послідовності не використовуючи цикли і зрізи.
# Довжина послідовності може бути довільною.
# nums = '2 10 15 9 3 6 7 11'
# num = nums.split()
#
# head = num.pop(0)
# print(head)
# print(*num)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#483. Напишіть програму, яка виводить частину послідовності 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5... (число повторюється стільки разів, чому дорівнює).
# На вхід програми передається невід’ємне ціле число n - стільки елементів послідовності повинна надрукувати програма.
# На виході очікується послідовність чисел, записаних через пропуск в один рядок.
# n = 8
#
# lst = []
# for i in range(1, n+1):
#     for w in range(1, i+1):
#         lst.append(i)
#
# print(*lst[:n])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#484. Виведіть таблицю розміром n × n, заповнену числами від 1 до n2 по спіралі, що виходить з лівого верхнього кута і закрученою за годинниковою стрілкою.
#//////////////////////////////////////////G B T ////////////////////////////////////////////////////
# n = 4
#
# # Створюємо порожню матрицю n x n, заповнену нулями
# matrix = [[0] * n for _ in range(n)]
#
# num = 1  # Лічильник чисел
# left, right, top, bottom = 0, n - 1, 0, n - 1  # Межі спіралі
#
# while num <= n * n:
#     # Заповнюємо верхню межу зліва направо
#     for i in range(left, right + 1):
#         matrix[top][i] = num
#         num += 1
#     top += 1  # Зсуваємо верхню межу вниз
#
#     # Заповнюємо праву межу зверху вниз
#     for i in range(top, bottom + 1):
#         matrix[i][right] = num
#         num += 1
#     right -= 1  # Зсуваємо праву межу вліво
#
#     # Заповнюємо нижню межу справа наліво
#     for i in range(right, left - 1, -1):
#         matrix[bottom][i] = num
#         num += 1
#     bottom -= 1  # Зсуваємо нижню межу вгору
#
#     # Заповнюємо ліву межу знизу вгору
#     for i in range(bottom, top - 1, -1):
#         matrix[i][left] = num
#         num += 1
#     left += 1  # Зсуваємо ліву межу вправо
#
# # Виводимо матрицю
# for row in matrix:
#     print(*row)
import random
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#486. Використовуючи поняття списку, напишіть програму, яка створює 3D масив елементів a x b x c, кожен з яких має значення 0. Значення a, b, c вводяться в одному рядку через пропуск.
# a, b, c = 4, 4, 4
#
# lst = []
#
# for i in range(c):
#     i_lst = []
#     for w in range(b):
#         w_lst = []
#         for g in range(a):
#             w_lst.append(0)
#         i_lst.append(w_lst)
#     lst.append(i_lst)
#
# print(lst)
#
# for i in lst:
#    print(i)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#487. Напишіть програму, на вхід якої подається список чисел одним рядком.
# Програма повинна для кожного елемента цього списку вивести суму двох його сусідів.
# Для елементів списку, які є крайніми, одним із сусідів вважається елемент, що знаходить на протилежному кінці цього списку.
# Якщо на вхід прийшло тільки одне число, треба вивести його ж.
# Виведення повинно містити один рядок з числами нового списку, розділеними пропусками.
# numbers = '1 3 5 6 10'
#
# num = []
# for i in numbers.split():
#     num.append(int(i))
#
# num_copy = num.copy()
#
# if len(num) == 1:
#     print(num[0])
# elif len(num) == 2:
#     print(sum(num))
# else:
#     for i in range(len(num)):
#         if i == 0:
#             num[i] = num_copy[i+1] + num_copy[-1]
#         elif i == len(num)-1:
#             num[i] = num_copy[-2] + num_copy[0]
#         else:
#             num[i] = num_copy[i-1] + num_copy[i+1]
#
# print(*num)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#488. Вводиться рядок, що складається із слів, розділених пропусками. Потрібно впорядкувати слова в рядку так,
# щоб найбільш короткі з них були спочатку рядка, а найбільш довгі в кінці.
# Слова необхідно вивести на екран через кому і пропуск, а рядок впорядкованих слів має закінчуватися крапкою.
# s = 'ab aaab ba baaaaa a aba'
#
# f = s.split()
#
# lst = []
#
# for _ in range(len(f)):
#
#     longest_word = 0
#     for i in f:
#         if len(i) > longest_word:
#             longest_word = len(i)
#
#     for i in f:
#         if len(i) == longest_word:
#             lst.insert(0, i)
#             f.remove(i)
#
#     longest_word -= 1
#
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#489. Вводяться n рядків. Визначити найдовший рядок і вивести його номер на екран.
# Якщо найдовших рядків кілька, то вивести номери всіх таких рядків.
# num_of_words = int(input("Enter a number of words you wish: "))
# words = []
# longest_word = 0
#
# while len(words) < num_of_words:
#     word = input('Enter a word: ')
#     words.append(word)
#
# for word in words:
#     if len(word) > longest_word:
#         longest_word = len(word)
#
# for word in range(len(words)):
#     if len(words[word]) == longest_word:
#         print(word + 1)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#490. Дано список з n (1 ≤ n ≤ 100000) цілих чисел і число k (|k| < 100000).
# Циклічно посуньте список на |k| елементів вправо, якщо k - додатне і вліво, якщо від’ємне число.
# Програма отримує на вхід список цілих чисел, потім число k. Рішення повинно мати складність O(n), тобто не повинно залежати від k.
# Додатковим списком користуватися не можна.
#
# import collections
# from collections import deque
#
# lst = [5, 3, 7, 4, 6, 8, 1, 2, 9]
# print(lst)
# n = 3
#
# if n > 0:
#     print(lst[len(lst) - n : len(lst)] + lst[0 : len(lst) - n])
# elif n < 0:
#     print(lst[abs(n) : len(lst)] + lst[0 : len(lst) - (abs(n) - 1)])
#
# vers - 2
# new_lst = []
# for i in range(len(lst) - n, len(lst)):
#     new_lst.append(lst[i])
# for i in range(0, len(lst) - n):
#     new_lst.append(lst[i])
# print(new_lst)
#
# vers - 3
#
# deque_1 = deque(lst)
# deque_1.rotate(n)
# lst = list(deque_1)
#
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#491. Користувач вводить ціле число n і видаляє одну цифру числа так, щоб число що утворилось, було максимально можливим.
# Наприклад, якщо число, яке ввели 432, то необхідно видалити цифру 2, яка стоїть на 3 місці, щоб отримати максимально можливе число 43.
# Напишіть програму, яка знайде максимально можливе число, яке можна отримати після видалення однієї цифри.
# n = 8981
#
# lst = []
# for i in list(str(n)):
#     lst.append(i)
#
# new_lst = []
#
# for i in range(len(lst)):
#     f = ''
#     for w in range(len(lst)):
#         if w == i:
#             continue
#         else:
#             f += lst[w]
#     new_lst.append(int(f))
# print(max(new_lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#492. Вводиться рядок слів, розділених пропусками. Знайти найдовше слово і вивести його на екран.
# Розглянути випадок, коли найдовших неоднакових слів може бути кілька.
# s = "Long time Pythoneer Tim Peters succinctly channels the BDFL's guiding principles for Python's design into 20 aphorisms"
# lst_s = s.split()
#
# count = 0
# for i in lst_s:
#     if len(i) > count:
#         count = len(i)
#
# result = []
# for i in lst_s:
#     if len(i) == count:
#         result.append(i)
# print(*result)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#493. В один ряд поставили n кеглів, пронумерувавши їх зліва направо числами від 1 до n.
# Потім в цей ряд кинули k куль, при цьому i-та куля збила всі кеглі з номерами від m до h включно.
# Визначте, які кеглі залишилися стояти на місці. Програма отримує на вхід кількість кеглів n і кількість кидків k.
# Далі йде k пар чисел m, h, при цьому 1 ≤ m ≤ h ≤ n ≤ 100.
# Програма повинна вивести послідовність з n символів, де j-й символ є I, якщо j-та кегля залишилася стояти, або ., якщо j-та кегля була збита.
# n = int(input('num of pins: '))
# k = int(input('number of throws: '))
#
# pins_lst = []
# for i in range(0, n):
#     pins_lst.append('I')
#
# count_of_throw = 0
#
# while count_of_throw < k:
#     count_of_throw += 1
#     m = int(input('from: '))
#     h = int(input('to: '))
#     for i in range(len(pins_lst)):
#         if (i+1 >= m) and (i+1 <= h):
#             pins_lst[i] = '.'
# print(*pins_lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#494. Дано список цілих чисел. Потрібно стиснути його, перемістивши всі ненульові елементи в ліву частину списку,
# не змінюючи їх порядок, а всі нулі - в праву частину. Порядок ненульових елементів змінювати не можна,
# додатковий список використовувати не можна, завдання потрібно виконати за один прохід по списку.
# Роздрукуйте отриманий список.
# lst = [6, 0, 3, 0, 5, 0, 0, 4]
# print(lst, 'main')
#
# for i in range(len(lst)):
#
#     if lst[i] == 0:
#         lst.remove(lst[i])
#         lst.append(0)
# print(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#495. Вводиться рядок, який може мати пропуски на початку, між словами і у кінці. Пропусків може бути більше одного.
# Необхідно привести рядок до нормального вигляду, тобто видалити усі пропуски, а між словами залишити тільки один пропуск.
# s = '      The   Zen     of     Python'
# f = s.split()
# g = ' '.join(f)
# print(g)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#496. Напишіть програму, яка приймає на вхід список чисел і число (в окремих рядках),
# після чого виводить всі позиції через пропуск, на яких це число зустрічається в переданому списку (позиції у списку нумеруються з 1).
# Позиції повинні бути виведені в порядку зростання.
# Якщо число не знайдено в списку, потрібно вивести рядок None (без лапок, з великої літери).
# lst = [5, 7, 3, 4, 9, 8, 4, 7, 4]
# n = 4
# place_lst = []
#
# if lst.count(n) != 0:
#     for i in range(len(lst)):
#         if lst[i] == n:
#             place_lst.append(i+1)
# else:
#     print('None')
#
# print(*place_lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#497. Напишіть програму, яка знаходить усі позиції входження підрядка B у рядок A.
# На першому рядку міститься вхідний рядок, на другому рядку введення вказаний підрядок, позиції якого потрібно знайти.
# Рядки складаються з символів англійського алфавіту.
# Програма має вивести позиції входження підрядка B у рядок A (індексація починається з 1),
# розділені пропуском або число -1 в разі, коли підрядок не знайдено.
# s = 'abacabadaba'
# f = 'aba'
#
# lst = list(s)
# result = []
# firs_step = s.rfind(f)
#
# if firs_step == -1:
#     print(s.rfind(f))
# else:
#     while lst:
#         g = ''.join(lst)
#         l = g.rfind(f)
#
#         if l == -1:
#             break
#
#         if l not in result:
#             result.append(l)
#
#         del lst[-1]
#
# print(*result[::-1])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#498. Кодування довжин послідовностей - це базовий алгоритм стиснення даних.
# Реалізуйте алгоритм дешифрування (декодування) рядків, закодованих за допомогою одного з найпростіших варіантів
# кодування довжин послідовностей. На вхід алгоритму подається рядок, що містить цифри і символи англійського алфавіту.
# Цей рядок розбивається на так звані серії (послідовності), які кодуються парою число-символ або просто символ (в такому
# випадку число вважається рівним одиниці). Результат повинен містити ці серії в тому ж порядку,
# що вони і зустрічаються в заданому рядку, при цьому кожна серія розгортається в послідовність символів відповідної довжини.
# Наприклад, закодований рядок 3ab4c2CaB розбивається на серії 3a b 4c 2C a B, після чого, перетворюючи серії,
# отримуємо початковий розкодований рядок aaabccccCCaB.
# s = '10a3b2c4DFj5h'
# f = ''
# num = ''
#
# for i in range(len(s)):
#     if s[i].isdigit() and num == '':
#         num += s[i]
#     elif s[i].isdigit() and num.isdigit():
#         num += s[i]
#     elif s[i].isalpha() and num == '':
#         f += s[i]
#     elif s[i].isalpha() and num.isdigit():
#         f += s[i] * int(num)
#         num = ''
#
# print(f)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#499. Напишіть програму, яка отримує на вхід чотирьохзначне додатне десяткове число та генерує з цифр цього числа
# мінімально можливе чотирьохзначне число та максимально можливе чотирьохзначне число. У першому рядку задано одне чотирьохзначне число.
# Виведіть у другому рядку два числа - найменше чотирьохзначне число та найбільше чотирьохзначне число, які можна отримати з цифр даного числа.
# Числа розділяйте одним пропуском.
# num = 1390
# print(num)
# lst_num = []
#
# for i in list(str(num)):
#     lst_num.append(int(i))
#
# max_lst = sorted(lst_num, reverse=True)
# min_lst = sorted(lst_num)
# maxg = []
# ming = []
# for i in max_lst:
#     maxg.append(str(i))
#
# mag = ''.join(maxg)
#
# if min_lst[0] == 0:
#     min_lst[0], min_lst[1] = min_lst[1], min_lst[0]
#
# for i in min_lst:
#     ming.append(str(i))
#
# mig = ''.join(ming)
#
# print(mig, mag)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#500. Вводиться послідовність цілих чисел у вигляді як у вхідних даних і перетвоюється у список списків, тобто у список,
# кожен елемент якого також є списком. Впорядкуйте цей список по другому елементу кожного списку і виведіть впорядкований список.
# s = '1 2 3,2 1 3,4 0 1'
# num = s.split(',')
#
# lst = []
#
# for i in num:
#     i_lst = []
#SS
#     for w in i:
#         if w.isdigit():
#             i_lst.append(int(w))
#
#     lst.append(i_lst)
# print(lst)







































































































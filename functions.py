#607. Напишіть функцію, яка отримує ім’я і друкує вітальне повідомлення.
# def some_name(name):
#     print(f'Hello, {name}')
#
#
# some_name('Alex')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#608. Напишіть функцію, яка отримує рядок і ціле число n та повертає n копій заданого рядка.
# def coping(num, s):
#     print(s * num)
#
#
# coping(3, 'I love coding')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#609. Напишіть функцію для обчислення суми двох цілих чисел.
# def amounts(a, b):
#     res = a + b
#     return res
#
#
# print(amounts(2, 5))
#
# a = lambda x, y: x + y
# print(a(2, 5))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#610. Напишіть функцію для перетворення цілого числа в рядок.
# def transformation(n):
#     res = str(n)
#     return res
#
#
# print(f"'{transformation(8)}'")
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#611. Напишіть функцію для отримання рядка з перших n символів іншого рядка. Якщо довжина рядка менше n, поверніть початковий рядок.
# def first_letters(n, s):
#     if len(s) < n:
#         print(s)
#     else:
#         print(s[ : n])
#
# first_letters(2, 'Java')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#612. Напишіть функцію для визначення більшого з двох цілих чисел без використання вбудованої функції max().
# Якщо числа рівні, то вивести повідомлення equal.
# def maximun_num(a, b):zrf ajhvekf dbpyfxtyyz nhbrenybrf pf cnjhjyfvb&
#     if a > b:
#         print(a)
#     elif a < b:
#         print(b)
#     elif a == b:
#         print('equal')
#
from os import lstat

# maximun_num(3, 3)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#613. Напишіть функцію для визначення найбільшого з трьох цілих чисел з використанянм вбудованої функції max().
# def maximun_num(a, b, c):
#     print(max([a, b, c]))
#
#
# maximun_num(1, 1, 1)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#614. Напишіть функцію, яка перевіряє, чи існує трикутник із введеними сторонами a, b, c.
# def is_a_triangle(a, b, c):
#     if a + b > c and a + c > b and b + c > a:
#         print('True')
#     else:
#         print("False")
#
#
# is_a_triangle(1, 2, 4)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#615. Напишіть функцію, яка отримує два слова, об’єднує їх за допомогою пропуску і друкує результат об’єднання.
# def two_words(a, b):
#     print(a + ' ' + b)
#
# two_words('Hello', 'World')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#615. Напишіть функцію, яка отримує 3 аргументи: перші 2 - числа, третій - операція (+, -, *, /), яка повинна бути проведена над ними.
# У випадку невідомої операції, функція повертає рядок Unknown operation. Результатом має бути дійсне число з двома знаками після десяткової крапки.
# def calculator(a, b, c):
#     if c == '+':
#         res = a + b
#     elif c == '-':
#         res = a - b
#     elif c == '*':
#         res = a * b
#     elif c == '/':
#         if b == 0:
#             return "Can't do that"
#         res = a / b
#     else:
#         return "Unknown operatoine"
#
#     return f"{res:.2f}"
#
#
# a = int(input())
# b = int(input())
# c = input()
#
# print(calculator(a, b, c))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#617. Напишіть функцію, яка перевіряє, чи подана послідовність порожня чи ні.
# def is_empty(*args):
#     if len(args) == 0:
#         print('False')
#     else:
#         print('True')
#
#
# is_empty()
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#618. Напишіть функцію, яка до введеного рядка на початку додає рядок Is. Якщо даний рядок вже починається з Is, то початковий рядок виводиться без змін.
# def is_add(s):
#     if s.startswith('Is'):
#         print(s)
#     else:
#         print(f'Is {s}')
#
#
# is_add('Is empty')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#619. Напишіть функцію для перевірки того, чи введена літера є голосною чи приголосною.
# def vowel_or_consonant(l):
#     if l in 'aeiouyAEIOUY':
#         print('True')
#     else:
#         print('False')
#
#
# vowel_or_consonant('t')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#620. Напишіть функцію для створення позначок тегів HTML навколо введених рядків. Функція отримує назву тега HTML і рядок, який необхідно помістити у відповідні теги.
# def html_tag(s):
#     parts = s.split(maxsplit=1)
#     tag = parts[0]
#     body = parts[1]
#     print(f'<{tag}>{body}</{tag}>')
#
#
# html_tag('strong Python')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#621. Напишіть функцію, яка приймає два слова в якості вхідних даних, і надрукуйте найдовше слово.
# Якщо слова мають однакову довжину, то функція повинна надрукувати слова в окремих рядках.
# def longest_word(s):
#     lst = []
#     words = s.split()
#     max_len = max(len(word) for word in words)
#     for word in s.split():
#         if len(word) == max_len:
#             lst.append(word)
#
#     for i in lst:
#         print(i)
#
#
# longest_word('five three Spotify')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#622. Напишіть функцію, яка повертає назву пори року для введеного значення номера місяця.
# def seasons(n):
#     dict_season = {'spring': (3, 4, 5), 'summer': (6, 7, 8), 'autumn': (9, 10, 11), 'winter': (12, 1, 2)}
#     for k, v in dict_season.items():
#         if n in v:
#             print(k)
#             break
#     else:
#         print('unknown')
#
#
# seasons(15)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#623. Напишіть функцію, яка повертає зі списку найменше і найбільше числа.
# def min_and_max_num(lst):
#     print((min(lst), max(lst)))
#
#
# lst = [61, 9, -5, 23, 15, 44, 31, 10, -14, 7, 8]
# min_and_max_num(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#624. Напишіть функцію для вставки рядка всередину іншого рядка.
# def within(a, b):
#
#     bifore = a[:(len(a)//2)]
#     after = a[(len(a)//2):]
#     print(f'{bifore}{b}{after}')
#
#
# within('qwerty', 'HTML')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#625. Напишіть функцію для перетворення літер введеного рядка у великі, якщо він містить принаймні n великих літер в перших m символах.
# Спочатку вводиться сам рядок, а в з нового рядка - числа n і m.
# def letter_conversion(word, nums):
#     first_l = nums[1]
#     big_l = nums[0]
#     count_for_big = 0
#     for l in word[:first_l]:
#         if l.isupper():
#             count_for_big += 1
#
#     if count_for_big >= big_l:
#         print(word.upper())
#     else:
#         print(word)
#
#
# word = input()
# num = input()
# nums = [int(n) for n in num.split()]
#
# letter_conversion(word, nums)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#626. Напишіть функцію для створення гістограми (наприклад, у вигляді *) із заданого списку цілих чисел як у вихідних даних. Формат введення списку чисел як у вхідних даних.
# def stars(lst):
#     star = '*'
#     for num in lst:
#         print(num * star)
#
#
# stars([2,7,1,4,2,3,9,3])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#627. Напишіть функцію, яка приймає ціле число і друкує інформацію про парність чи непарність числа.
# def odd_or_not(n):
#     print(n % 2 == 0)
#
#
# odd_or_not(9)
#*******************OR LIKE THIS*********************
# odd_or_not = lambda n: n % 2 == 0
#
#
# print(odd_or_not(9))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#628. Напишіть функцію для друку парних чисел із заданої послідовності цілих чисел.
# def odd_or_not(lst):
#     even = []
#     for n in lst:
#         if n % 2 == 0:
#             even.append(n)
#     return even
#
#
# print(*odd_or_not([32, 4, 7, 9, 11, 13, 15, 8]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#629. Напишіть функцію для підрахунку суми всіх елементів у списку цілих чисел.
# def sum_of_all(lst):
#     print(sum(lst))
#
#
# sum_of_all([1, 10, 4, 8, 11, 5, 2])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#630. Напишіть функцію для підрахунку добутку усіх елементів у списку цілих чисел.
# def product_of_all(lst):
#     p = 1
#     for n in lst:
#         p *= n
#
#     return p
#
#
# print(product_of_all([1, 10, 4, 8, 11, 5, 2]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#631. Напишіть функцію для створення і друку словника, в якому ключі - цілі числа від 1 до n включно, а значення - квадрати цих чисел.
# def create_a_dict(n):
#     some_dict = {}
#     for num in range(1, n+1):
#         some_dict[num] = num ** 2
#
#     return some_dict
#
#
# print(create_a_dict(10))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#632. Напишіть функцію для створення і друку списку, в якому значення - квадрати цілих чисел від 1 до n включно.
# def create_a_list(n):
#     lst = [n ** 2 for n in range(1, n+1)]
#     return lst
#
#
# print(create_a_list(5))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#633. Напишіть функцію, яка може генерувати та друкувати кортеж зі значеннями квадратів чисел від 1 до n включно.
# def create_a_cortege(n):
#     cor = tuple(n ** 2 for n in range(1, n + 1))
#     return cor
#
#
# print(create_a_cortege(6))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#634. Python має вбудовану функцію __doc__ для друку документації для всіх вбудованих функцій.
# Наприклад, для доступу до документації функції abs(), слід використати такий запис: print(input.__doc__).
# Напишіть функцію для обчислення квадрата цілого числа. В тілі функції додайте багаторядковий коментар про те, що робить функція.
# Викличте функцію і перегляньте її документацію.
# def square_integer(n):
#     """Return the square value of the input number.
#     The input number must be integer.
#     """
#     n = n ** 2
#     return n
#
# print(square_integer(9))
# print(square_integer.__doc__)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#635. Напишіть функцію, яка приймає послідовність чисел як у вхідних даних і створює список лише з першого та останнього елементів.
# def first_and_last(lst):
#     result = []
#     result.append(lst[0])
#     result.append(lst[-1])
#     return result
#
#
# print(first_and_last([5, 16, 72, 29, 11, 217, 112]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#636. Напишіть програму, і створіть в ній дві функції. Перша з них - приймає послідовність цілих чисел і повертає список.
# Друга - повертає новий список, що містить всі елементи першого списку без дублікатів.
# s = '5 16 5 29 11 217 11'
#
# def create_lst(s):
#     lst = [int(n) for n in s.split()]
#     return lst
#
#
# def without_duplicates(a):
#     lst = [n for n in set(a)]
#     return lst
#
#
# a = create_lst(s)
# print(without_duplicates(a))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#637. Напишіть функцію, яка отримує рядок слів, розділених пропуском. Надрукуйте рядок слів у звороному порядку.
# def reverse_order(s):
#     lst = [word for word in s.split()]
#     reverse_s = ' '.join(lst[::-1])
#     return reverse_s
#
#
# s = 'one two three'
# print(reverse_order(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#638. Напишіть функцію, яка приймає послідовність цілих чисел та ціле число n, що вводяться на окремих рядках.
# Функція повертає True, якщо вказане число знаходиться всередині списку, або False у протилежному випадку.
# lst = [3, 6, 9, 10, 23, 14]
# num = 23
#
# def is_in(lst, num):
#     print(num in lst)
#
# is_in(lst, num)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#6 нАПИШИть функцію, яка об’єднує всі елементи послідовності, введені через пропуск, в рядок, де елементи вже розділені комою і
# одним пропуском, і повертає його як у вихідних даних.
# def plus_coma(s):
#     lst = [l for l in s.split()]
#     result = ', '.join(lst)s
#     return result
#
#
# s = 'Python Ruby C Go Java JavaScript'
# print(plus_coma(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#640. Напишіть функцію для визначення суми трьох цілих чисел. Якщо будь-які два значення однакові, необхідно вивести нуль.
# def three_sum(lst):
#     result = 0
#     for num in lst:
#         if lst.count(num) > 1:
#             result = 0
#             break
#         else:
#             result += num
#     return result
#
#
# print(three_sum([1, 2, 9]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#641. Напишіть функцію для перевірки наявності одного списку у іншому списку. Cписки містять принаймні по одному елементу.
# def find_a_truth(lst1, lst2):
#     a = ''.join([str(i) for i in lst1])
#     b = ''.join([str(i) for i in lst2])
#     result = a.find(b)
#     if result > 0:
#         print('True')
#     else:
#         print('False')
#
#
# lst1 = [2, 6, 8, 4, 9, 1, 1]
# lst2 = [4, 9]
# find_a_truth(lst1, lst2)
#
# print(set(lst1))
#***********************OR LIKE THIS**************************************
# def find_a_truth(lst1, lst2):
#     if all(i in lst2 for i in lst2):
#         print('True')
#     else:
#         print('False')
#
#
# lst1 = [2, 6, 8, 4, 9, 1, 1]
# lst2 = [9, 4]
# find_a_truth(lst1, lst2)
#***********************OR LIKE THIS**************************************
# def find_a_truth(lst1, lst2):
#     a = 0
#     for i in lst1:
#         if lst1[a:a+len(lst2)] == lst2:
#             print('True')
#             break
#         a+=1
#     else:
#         print('False')
#
#
# lst1 = [2, 6, 8, 4, 9, 1, 1]
# lst2 = [4, 9]
# find_a_truth(lst1, lst2)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#642. Напишіть функцію, яка приймає послідовність слів, розділених за допомогою дефісу і друкує слова в послідовності,
# розділеній за допомогою дефісу, після сортування за алфавітом.
# def alphabet(s):
#     lst = sorted([word for word in s.split('-')])
#     result = '-'.join(lst)
#     return result
#
#
# s = 'one-two-three-four-five-six-seven'
# print(alphabet(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#643. Напишіть функцію, щоб вилучити певні символи із введеного рядка. Спочатку вводиться початковий рядок, а далі з нового рядка символи,
# які необхідно вилучити з початкового рядка. Результатом має бути новий рядок без вилучених символів.
# def remove_characters(s, s_del):
#     lst_s = [i for i in list(s)]
#
#     for i in lst_s:
#         if i in list(s_del):
#             lst_s.remove(i)
#
#     result = ''.join(lst_s)
#     return result
#
# s = 'I did, did I?'
# s_del = 'd?'
# print(remove_characters(s, s_del))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#644. Дано два дійсних числа x і y. Напишіть функцію для перевірки, чи належить точка з координатами (x, y) квадрату (включаючи його межу),
# що має розміри 2 х 2 клітинки і розташований в початку системи координат. Якщо точка належить квадрату, виведіть слово YES,
# інакше виведіть слово NO. Функція не повинна містити інструкцію «якщо».
# def in_a_square(x, y):
#     print(('NO', 'YES')[0 <= x <= 2 and 0 <= y <= 2])
#
#
# x = -1
# y = 1
# in_a_square(x, y)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#645. Дано два дійсних числа x і y. Напишіть функцію для перевірки, чи належить точка з координатами (x, y) ромбу (включаючи його межу),
# що має розміри 1 х 1 клітинки і розташований в початку системи координат. Якщо точка належить ромбу, виведіть слово YES,
# інакше виведіть слово NO. Функція не повинна містити інструкцію «якщо».
# def in_a_diamond(x, y):
#     print(('NO', 'YES')[abs(x) + abs(y) <= 0.5])
#
#
# x = -0.5
# y = 0.0
# in_a_diamond(x, y)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#646. Дано п’ять дійсних чисел: x, y, xc, yc, r. Напишіть функцію для перевірки, чи належить точка (x, y) колу з центром (xc, yc) і радіусом r.
# Якщо точка належить колу, виведіть слово YES, інакше виведіть слово NO. Функція не повинна містити інструкцію «якщо».
# def in_a_circle(x, y, xc, yc, r):
#     print(('NO', 'YES')[((xc - x)**2 + (yc -y)**2)**0.5 <= r])
#
# x = 1       #точка, що шукаєм
# y = 1       #точка, що шукаєм
#
# xc = 4
# yc = 5
# r = 3
# in_a_circle(x, y, xc, yc, r)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#647. Надрукуйте найменше з трьох введених чисел без використання вбудованої функції min().
# Для цього напишіть першу функцію, яка повертає найменше число з двох заданих.
# У другій функції реалізуйте використання першої функції для визначення найменшого значення серед трьох чисел.
# def first_minimum(a, b):
#     return a if a < b else b
#
# def second_minimum(a, b, c):
#     return first_minimum(first_minimum(a, b),c)
#
#
# print(second_minimum(5, 8, 11))

#***********************OR LIKE THIS**************************************
# def find_minimum(lst):
#     m = lst[0]
#     for num in lst:
#         if num <= m:
#             m = num
#
#     return m
#
#
# lst = [12, 12, 24]
# print(find_minimum(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 648. Дано чотири дійсних числа: x1, y1, x2, y2. Напишіть функцію distance(x1, y1, x2, y2), яка обчислює відстань між точкою (x1, y1) і (x2, y2).
# Введіть чотири дійсних числа і виведіть результат роботи цієї функції.
# def distance(x1, y1, x2, y2):
#     return ((x2 - x1)**2 + (y2 - y1)**2)**0.5
#
#
# print(f'{distance(0, 0, 1, 1):.5f}')
#***********************OR LIKE THIS**************************************
# distance = lambda x1, y1, x2, y2: ((x2 - x1)**2 + (y2 - y1)**2)**0.5
#
#
# print(f'{distance(0, 0, 1, 1):.5f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#649. Напишіть функцію, яка отримує рядок і обчислює кількість великих та нижніх букв в ньому і друкує результат як у вихідних даних -
# спочатку кількість великих, а потім кількість малих літер.
# def up_low_letters(s):
#     up = 0
#     low = 0
#     for letter in s:
#         if letter.islower():
#             low += 1
#         elif letter.isupper():
#             up += 1
#
#     print(up)
#     print(low)
#
#
# up_low_letters('Was it a car or a cat I saw?')































































































































































































































































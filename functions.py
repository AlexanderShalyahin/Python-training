#607. Напишіть функцію, яка отримує ім’я і друкує вітальне повідомлення.
# def some_name(name):
#     print(f'Hello, {name}')
#
#
# some_name('Alex')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#608. Напишіть функцію, яка отримує рядок і ціле число n та повертає n копій заданого рядка.
# def coping(num, s):
#     print(s * num)
#
#
# coping(3, 'I love coding')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#609. Напишіть функцію для обчислення суми двох цілих чисел.
# def amounts(a, b):
#     res = a + b
#     return res
#
#
# print(amounts(2, 5))
#
# a = lambda x, y: x + y
# print(a(2, 5))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#610. Напишіть функцію для перетворення цілого числа в рядок.
# def transformation(n):
#     res = str(n)
#     return res
#
#
# print(f"'{transformation(8)}'")
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#611. Напишіть функцію для отримання рядка з перших n символів іншого рядка. Якщо довжина рядка менше n, поверніть початковий рядок.
# def first_letters(n, s):
#     if len(s) < n:
#         print(s)
#     else:
#         print(s[ : n])
#
# first_letters(2, 'Java')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#612. Напишіть функцію для визначення більшого з двох цілих чисел без використання вбудованої функції max().
# Якщо числа рівні, то вивести повідомлення equal.
# def maximun_num(a, b):zrf ajhvekf dbpyfxtyyz nhbrenybrf pf cnjhjyfvb&
#     if a > b:
#         print(a)
#     elif a < b:
#         print(b)
#     elif a == b:
#         print('equal')
#
import heapq
from os import lstat

# maximun_num(3, 3)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#613. Напишіть функцію для визначення найбільшого з трьох цілих чисел з використанянм вбудованої функції max().
# def maximun_num(a, b, c):
#     print(max([a, b, c]))
#
#
# maximun_num(1, 1, 1)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#614. Напишіть функцію, яка перевіряє, чи існує трикутник із введеними сторонами a, b, c.
# def is_a_triangle(a, b, c):
#     if a + b > c and a + c > b and b + c > a:
#         print('True')
#     else:
#         print("False")
#
#
# is_a_triangle(1, 2, 4)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#615. Напишіть функцію, яка отримує два слова, об’єднує їх за допомогою пропуску і друкує результат об’єднання.
# def two_words(a, b):
#     print(a + ' ' + b)
#
# two_words('Hello', 'World')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#615. Напишіть функцію, яка отримує 3 аргументи: перші 2 - числа, третій - операція (+, -, *, /), яка повинна бути проведена над ними.
# У випадку невідомої операції, функція повертає рядок Unknown operation. Результатом має бути дійсне число з двома знаками після десяткової крапки.
# def calculator(a, b, c):
#     if c == '+':
#         res = a + b
#     elif c == '-':
#         res = a - b
#     elif c == '*':
#         res = a * b
#     elif c == '/':
#         if b == 0:
#             return "Can't do that"
#         res = a / b
#     else:
#         return "Unknown operatoine"
#
#     return f"{res:.2f}"
#
#
# a = int(input())
# b = int(input())
# c = input()
#
# print(calculator(a, b, c))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#617. Напишіть функцію, яка перевіряє, чи подана послідовність порожня чи ні.
# def is_empty(*args):
#     if len(args) == 0:
#         print('False')
#     else:
#         print('True')
#
#
# is_empty()
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#618. Напишіть функцію, яка до введеного рядка на початку додає рядок Is. Якщо даний рядок вже починається з Is, то початковий рядок виводиться без змін.
# def is_add(s):
#     if s.startswith('Is'):
#         print(s)
#     else:
#         print(f'Is {s}')
#
#
# is_add('Is empty')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#619. Напишіть функцію для перевірки того, чи введена літера є голосною чи приголосною.
# def vowel_or_consonant(l):
#     if l in 'aeiouyAEIOUY':
#         print('True')
#     else:
#         print('False')
#
#
# vowel_or_consonant('t')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#620. Напишіть функцію для створення позначок тегів HTML навколо введених рядків. Функція отримує назву тега HTML і рядок, який необхідно помістити у відповідні теги.
# def html_tag(s):
#     parts = s.split(maxsplit=1)
#     tag = parts[0]
#     body = parts[1]
#     print(f'<{tag}>{body}</{tag}>')
#
#
# html_tag('strong Python')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#621. Напишіть функцію, яка приймає два слова в якості вхідних даних, і надрукуйте найдовше слово.
# Якщо слова мають однакову довжину, то функція повинна надрукувати слова в окремих рядках.
# def longest_word(s):
#     lst = []
#     words = s.split()
#     max_len = max(len(word) for word in words)
#     for word in s.split():
#         if len(word) == max_len:
#             lst.append(word)
#
#     for i in lst:
#         print(i)
#
#
# longest_word('five three Spotify')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#622. Напишіть функцію, яка повертає назву пори року для введеного значення номера місяця.
# def seasons(n):
#     dict_season = {'spring': (3, 4, 5), 'summer': (6, 7, 8), 'autumn': (9, 10, 11), 'winter': (12, 1, 2)}
#     for k, v in dict_season.items():
#         if n in v:
#             print(k)
#             break
#     else:
#         print('unknown')
#
#
# seasons(15)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#623. Напишіть функцію, яка повертає зі списку найменше і найбільше числа.
# def min_and_max_num(lst):
#     print((min(lst), max(lst)))
#
#
# lst = [61, 9, -5, 23, 15, 44, 31, 10, -14, 7, 8]
# min_and_max_num(lst)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#624. Напишіть функцію для вставки рядка всередину іншого рядка.
# def within(a, b):
#
#     bifore = a[:(len(a)//2)]
#     after = a[(len(a)//2):]
#     print(f'{bifore}{b}{after}')
#
#
# within('qwerty', 'HTML')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#625. Напишіть функцію для перетворення літер введеного рядка у великі, якщо він містить принаймні n великих літер в перших m символах.
# Спочатку вводиться сам рядок, а в з нового рядка - числа n і m.
# def letter_conversion(word, nums):
#     first_l = nums[1]
#     big_l = nums[0]
#     count_for_big = 0
#     for l in word[:first_l]:
#         if l.isupper():
#             count_for_big += 1
#
#     if count_for_big >= big_l:
#         print(word.upper())
#     else:
#         print(word)
#
#
# word = input()
# num = input()
# nums = [int(n) for n in num.split()]
#
# letter_conversion(word, nums)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#626. Напишіть функцію для створення гістограми (наприклад, у вигляді *) із заданого списку цілих чисел як у вихідних даних. Формат введення списку чисел як у вхідних даних.
# def stars(lst):
#     star = '*'
#     for num in lst:
#         print(num * star)
#
#
# stars([2,7,1,4,2,3,9,3])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#627. Напишіть функцію, яка приймає ціле число і друкує інформацію про парність чи непарність числа.
# def odd_or_not(n):
#     print(n % 2 == 0)
#
#
# odd_or_not(9)
#*******************OR LIKE THIS*********************
# odd_or_not = lambda n: n % 2 == 0
#
#
# print(odd_or_not(9))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#628. Напишіть функцію для друку парних чисел із заданої послідовності цілих чисел.
# def odd_or_not(lst):
#     even = []
#     for n in lst:
#         if n % 2 == 0:
#             even.append(n)
#     return even
#
#
# print(*odd_or_not([32, 4, 7, 9, 11, 13, 15, 8]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#629. Напишіть функцію для підрахунку суми всіх елементів у списку цілих чисел.
# def sum_of_all(lst):
#     print(sum(lst))
#
#
# sum_of_all([1, 10, 4, 8, 11, 5, 2])
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#630. Напишіть функцію для підрахунку добутку усіх елементів у списку цілих чисел.
# def product_of_all(lst):
#     p = 1
#     for n in lst:
#         p *= n
#
#     return p
#
#
# print(product_of_all([1, 10, 4, 8, 11, 5, 2]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#631. Напишіть функцію для створення і друку словника, в якому ключі - цілі числа від 1 до n включно, а значення - квадрати цих чисел.
# def create_a_dict(n):
#     some_dict = {}
#     for num in range(1, n+1):
#         some_dict[num] = num ** 2
#
#     return some_dict
#
#
# print(create_a_dict(10))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#632. Напишіть функцію для створення і друку списку, в якому значення - квадрати цілих чисел від 1 до n включно.
# def create_a_list(n):
#     lst = [n ** 2 for n in range(1, n+1)]
#     return lst
#
#
# print(create_a_list(5))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#633. Напишіть функцію, яка може генерувати та друкувати кортеж зі значеннями квадратів чисел від 1 до n включно.
# def create_a_cortege(n):
#     cor = tuple(n ** 2 for n in range(1, n + 1))
#     return cor
#
#
# print(create_a_cortege(6))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#634. Python має вбудовану функцію __doc__ для друку документації для всіх вбудованих функцій.
# Наприклад, для доступу до документації функції abs(), слід використати такий запис: print(input.__doc__).
# Напишіть функцію для обчислення квадрата цілого числа. В тілі функції додайте багаторядковий коментар про те, що робить функція.
# Викличте функцію і перегляньте її документацію.
# def square_integer(n):
#     """Return the square value of the input number.
#     The input number must be integer.
#     """
#     n = n ** 2
#     return n
#
# print(square_integer(9))
# print(square_integer.__doc__)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#635. Напишіть функцію, яка приймає послідовність чисел як у вхідних даних і створює список лише з першого та останнього елементів.
# def first_and_last(lst):
#     result = []
#     result.append(lst[0])
#     result.append(lst[-1])
#     return result
#
#
# print(first_and_last([5, 16, 72, 29, 11, 217, 112]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#636. Напишіть програму, і створіть в ній дві функції. Перша з них - приймає послідовність цілих чисел і повертає список.
# Друга - повертає новий список, що містить всі елементи першого списку без дублікатів.
# s = '5 16 5 29 11 217 11'
#
# def create_lst(s):
#     lst = [int(n) for n in s.split()]
#     return lst
#
#
# def without_duplicates(a):
#     lst = [n for n in set(a)]
#     return lst
#
#
# a = create_lst(s)
# print(without_duplicates(a))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#637. Напишіть функцію, яка отримує рядок слів, розділених пропуском. Надрукуйте рядок слів у звороному порядку.
# def reverse_order(s):
#     lst = [word for word in s.split()]
#     reverse_s = ' '.join(lst[::-1])
#     return reverse_s
#
#
# s = 'one two three'
# print(reverse_order(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#638. Напишіть функцію, яка приймає послідовність цілих чисел та ціле число n, що вводяться на окремих рядках.
# Функція повертає True, якщо вказане число знаходиться всередині списку, або False у протилежному випадку.
# lst = [3, 6, 9, 10, 23, 14]
# num = 23
#
# def is_in(lst, num):
#     print(num in lst)
#
# is_in(lst, num)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#6 нАПИШИть функцію, яка об’єднує всі елементи послідовності, введені через пропуск, в рядок, де елементи вже розділені комою і
# одним пропуском, і повертає його як у вихідних даних.
# def plus_coma(s):
#     lst = [l for l in s.split()]
#     result = ', '.join(lst)s
#     return result
#
#
# s = 'Python Ruby C Go Java JavaScript'
# print(plus_coma(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#640. Напишіть функцію для визначення суми трьох цілих чисел. Якщо будь-які два значення однакові, необхідно вивести нуль.
# def three_sum(lst):
#     result = 0
#     for num in lst:
#         if lst.count(num) > 1:
#             result = 0
#             break
#         else:
#             result += num
#     return result
#
#
# print(three_sum([1, 2, 9]))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#641. Напишіть функцію для перевірки наявності одного списку у іншому списку. Cписки містять принаймні по одному елементу.
# def find_a_truth(lst1, lst2):
#     a = ''.join([str(i) for i in lst1])
#     b = ''.join([str(i) for i in lst2])
#     result = a.find(b)
#     if result > 0:
#         print('True')
#     else:
#         print('False')
#
#
# lst1 = [2, 6, 8, 4, 9, 1, 1]
# lst2 = [4, 9]
# find_a_truth(lst1, lst2)
#
# print(set(lst1))
#***********************OR LIKE THIS**************************************
# def find_a_truth(lst1, lst2):
#     if all(i in lst2 for i in lst2):
#         print('True')
#     else:
#         print('False')
#
#
# lst1 = [2, 6, 8, 4, 9, 1, 1]
# lst2 = [9, 4]
# find_a_truth(lst1, lst2)
#***********************OR LIKE THIS**************************************
# def find_a_truth(lst1, lst2):
#     a = 0
#     for i in lst1:
#         if lst1[a:a+len(lst2)] == lst2:
#             print('True')
#             break
#         a+=1
#     else:
#         print('False')
#
#
# lst1 = [2, 6, 8, 4, 9, 1, 1]
# lst2 = [4, 9]
# find_a_truth(lst1, lst2)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#642. Напишіть функцію, яка приймає послідовність слів, розділених за допомогою дефісу і друкує слова в послідовності,
# розділеній за допомогою дефісу, після сортування за алфавітом.
# def alphabet(s):
#     lst = sorted([word for word in s.split('-')])
#     result = '-'.join(lst)
#     return result
#
#
# s = 'one-two-three-four-five-six-seven'
# print(alphabet(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#643. Напишіть функцію, щоб вилучити певні символи із введеного рядка. Спочатку вводиться початковий рядок, а далі з нового рядка символи,
# які необхідно вилучити з початкового рядка. Результатом має бути новий рядок без вилучених символів.
# def remove_characters(s, s_del):
#     lst_s = [i for i in list(s)]
#
#     for i in lst_s:
#         if i in list(s_del):
#             lst_s.remove(i)
#
#     result = ''.join(lst_s)
#     return result
#
# s = 'I did, did I?'
# s_del = 'd?'
# print(remove_characters(s, s_del))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#644. Дано два дійсних числа x і y. Напишіть функцію для перевірки, чи належить точка з координатами (x, y) квадрату (включаючи його межу),
# що має розміри 2 х 2 клітинки і розташований в початку системи координат. Якщо точка належить квадрату, виведіть слово YES,
# інакше виведіть слово NO. Функція не повинна містити інструкцію «якщо».
# def in_a_square(x, y):
#     print(('NO', 'YES')[0 <= x <= 2 and 0 <= y <= 2])
#
#
# x = -1
# y = 1
# in_a_square(x, y)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#645. Дано два дійсних числа x і y. Напишіть функцію для перевірки, чи належить точка з координатами (x, y) ромбу (включаючи його межу),
# що має розміри 1 х 1 клітинки і розташований в початку системи координат. Якщо точка належить ромбу, виведіть слово YES,
# інакше виведіть слово NO. Функція не повинна містити інструкцію «якщо».
# def in_a_diamond(x, y):
#     print(('NO', 'YES')[abs(x) + abs(y) <= 0.5])
#
#
# x = -0.5
# y = 0.0
# in_a_diamond(x, y)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#646. Дано п’ять дійсних чисел: x, y, xc, yc, r. Напишіть функцію для перевірки, чи належить точка (x, y) колу з центром (xc, yc) і радіусом r.
# Якщо точка належить колу, виведіть слово YES, інакше виведіть слово NO. Функція не повинна містити інструкцію «якщо».
# def in_a_circle(x, y, xc, yc, r):
#     print(('NO', 'YES')[((xc - x)**2 + (yc -y)**2)**0.5 <= r])
#
# x = 1       #точка, що шукаєм
# y = 1       #точка, що шукаєм
#
# xc = 4
# yc = 5
# r = 3
# in_a_circle(x, y, xc, yc, r)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#647. Надрукуйте найменше з трьох введених чисел без використання вбудованої функції min().
# Для цього напишіть першу функцію, яка повертає найменше число з двох заданих.
# У другій функції реалізуйте використання першої функції для визначення найменшого значення серед трьох чисел.
# def first_minimum(a, b):
#     return a if a < b else b
#
# def second_minimum(a, b, c):
#     return first_minimum(first_minimum(a, b),c)
#
#
# print(second_minimum(5, 8, 11))

#***********************OR LIKE THIS**************************************
# def find_minimum(lst):
#     m = lst[0]
#     for num in lst:
#         if num <= m:
#             m = num
#
#     return m
#
#
# lst = [12, 12, 24]
# print(find_minimum(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 648. Дано чотири дійсних числа: x1, y1, x2, y2. Напишіть функцію distance(x1, y1, x2, y2), яка обчислює відстань між точкою (x1, y1) і (x2, y2).
# Введіть чотири дійсних числа і виведіть результат роботи цієї функції.
# def distance(x1, y1, x2, y2):
#     return ((x2 - x1)**2 + (y2 - y1)**2)**0.5
#
#
# print(f'{distance(0, 0, 1, 1):.5f}')
#***********************OR LIKE THIS**************************************
# distance = lambda x1, y1, x2, y2: ((x2 - x1)**2 + (y2 - y1)**2)**0.5
#
#
# print(f'{distance(0, 0, 1, 1):.5f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#649. Напишіть функцію, яка отримує рядок і обчислює кількість великих та нижніх букв в ньому і друкує результат як у вихідних даних -
# спочатку кількість великих, а потім кількість малих літер.
# def up_low_letters(s):
#     up = 0
#     low = 0
#     for letter in s:
#         if letter.islower():
#             low += 1
#         elif letter.isupper():
#             up += 1
#
#     print(up)
#     print(low)
#
#
# up_low_letters('Was it a car or a cat I saw?')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#650. Напишіть функцію для підрахунку входжень кожного слова в певному реченні.
# def word_count(s):
#     word_dict = {}
#     for word in s.split():
#         if word in word_dict:
#             word_dict[word] += 1
#         else:
#             word_dict[word] = 1
#     print(word_dict)
#
#
# word_count('the quick brown fox jumps over the lazy dog')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#651. Напишіть функцію - простий лічильник відвідувань, яка отримує в циклі (до тих пір, поки не буде введено 0) логін.
# Якщо логін новий, то лічильник збільшується на одиницю, якщо логін вже був, то лічильник відвідувань також збільшується на одиницю,
# а число унікальних відвідувачів залишається незмінним. На екран має виводитися кількість відвідувань і кількість унікальних користувачів.
# def login_count():
#     unique_visitors = 0
#     all_visitors = 0
#     lst = []
#     while True:
#         log = input("")
#         all_visitors += 1
#
#         if log == '0':
#             break
#
#         if log not in lst:
#             lst.append(log)
#             unique_visitors += 1
#
#         print(all_visitors, unique_visitors)
#
#
# login_count()
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#652. Напишіть функцію, яка друкує усі слова із списку, довжина яких перевищує n.
# def print_word(s, num):
#     words = [word for word in s.split() if len(word) > num]
#     result = ' '. join(words)
#     return result
#
#
# s = 'Denmark England Estonia France Greece Romania Ukraine'
# num = 6
# print(print_word(s, num))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#653. Напишіть функцію, яка приймає два списки та повертає True, якщо у них є щонайменше один спільний елемент.
# def common_element(lst1, lst2):
#     print(any(i in lst1 for i in lst2))
#
#
# lst1 = [1, 'two', 'three', 'four', 'five', 6, 'seven', 8, 9, 'ten']
# lst2 = ['five', 'hundred']
# common_element(lst1, lst2)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#654. Напишіть функцію для визначення, чи рік високосний чи ні.
# def leap_year_or_not(year):
#     if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
#         print('True')
#     else:
#         print('False')
#
#
# leap_year_or_not(2020)
#***********************OR LIKE THIS**************************************
# def leap_year_or_not(year):
#     return year % 4 == 0 and year % 100 != 0 or year % 400 == 0
#
#
# if leap_year_or_not(2023):
#     print('True')
# else:
#     print('False')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#655. Напишіть функцію, яка приймає слово у нижньому регістрі і повертає слово з першою великою буквою.
# Введіть рядок слів через пропуск у нижньому регістрі і застосуйте створену функцію для отримання результату як у вихідних даних.
# def letter_up(s):
#     return s.title()
#
#
# print(letter_up('jived fox nymph grabs quick waltz'))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#656. Вкладник розмістив суму розміром n грн. в банку. Визначте, яку суму отримає вкладник через m років,
# якщо відсоткова ставка складає p% в рік. Дані вводяться в порядку n, p, m як у вхідних даних.
# def amount(n, p, m):
#     return n * (p / 100) * m + n
#
#
# n = 5000
# p = 18
# m = 2
# print(f'{amount(n, p, m):.2f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#657. Дано дійсне додатне число a і ціле число n, яке може набувати додатних і від’ємних значень. Напишіть функцію для обчислення an.
# Стандартною функцією піднесення до степеня і оператором ** користуватися не можна.
# def exponentiation(a, n):
#     exp = 1
#
#     for _ in range(abs(n)):
#         exp *= a
#
#     return exp if n > 0 else 1 / exp
#
#
# a = 2
# n = 1
# print(f'{exponentiation(a, n):.1f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#658. Напишіть функцію, яка отримує значення середньомісячної кількості опадів по місяцях (в мм) і повертає загальний
# обсяг опадів протягом року, середньорічну кількість опадів, назви місяців та значення з найвищим та найменшим числом опадів протягом року.
# def amount_of_precipitation(lst):
#     month = {'January': 0, 'February': 0, 'March': 0, 'April': 0, 'May': 0, 'June': 0, 'July': 0, 'August': 0,
#              'September': 0, 'October': 0, 'November': 0, 'December': 0}
#
#     count_month = 0
#     for mon, amount in month.items():
#         month[mon] = lst[count_month]
#         count_month += 1
#
#     b = []
#     s = []
#     for mon, amount in month.items():
#         if amount == max(month.values()):
#             b.append(float(amount))
#             b.append(mon)
#         elif amount == min(month.values()):
#             while len(s) < 2:
#                 s.append(float(amount))
#                 s.append(mon)
#
#     return sum(month.values()), sum(month.values()) / len(month), tuple(b), tuple(s)
#
#
# lst = [22, 22, 24, 49, 72, 98, 101, 82, 51, 40, 36, 24]
# print(amount_of_precipitation(lst))
#***********************OR LIKE THIS **************************************
# def amount_of_precipitation(lst):
#     month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
#     month_precipitation = dict(zip(month, precipitation)) #     Функція zip() об'єднує n-ий елемент з першого списку з n-им елементом другого
#                                                           #     zip(months, lst) створює пари (кортежі), поєднуючи елементи з обох списків
#     total = float(sum(month_precipitation.values()))
#     average = float(sum(month_precipitation.values()) / len(month_precipitation))
#
#     max_precipitation = max(month_precipitation.items(), key=lambda value: value[1]) #      приймає один аргумент x (кортеж на кшталт ('March', 24)),
#     min_precipitation = min(month_precipitation.items(), key=lambda value: value[1]) #      і повертає друге значення з цього кортежу — тобто кількість опадів
#
#     return total, average, (float(max_precipitation[1]), max_precipitation[0]), (float(min_precipitation[1]), min_precipitation[0])
#
#
# precipitation = [22, 22, 24, 49, 72, 98, 101, 82, 51, 40, 36, 24]
# print(amount_of_precipitation(precipitation))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#659. Написати функцію для перевірки правильності введеної дати. Функція приймає 3 аргументи - день, місяць та рік і повертає True,
# якщо така дата є в календарі, і False в протилежному випадку.
# def calendar(day, month, year):
#     if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
#         month_days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
#     else:
#         month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
#
#     if month in month_days:
#         if day <= month_days[month]:
#             return True
#         else:
#             return False
#     else:
#         return False
#
#
# day = 29
# month = 2
# year = 2024
# print(calendar(day, month, year))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#660. Напишіть функцію для перевірки, чи є число ідеальним чи ні. Примітка. У теорії чисел ідеальне число - це додатне ціле число,
# яке дорівнює сумі власних додатних дільників, тобто сумі додатних дільників, виключаючи саме число.
# Відповідно, ідеальне число - це число, що дорівнює половині суми всіх додатних дільників (включаючи саме число).
# Наприклад: перше ідеальне число - 6, оскільки 1, 2 і 3 - це правильні додатні дільники, а 1 + 2 + 3 = 6. Відповідно,
# число 6 дорівнює половині суми всіх його додатних дільників: (1 + 2 + 3 + 6) / 2 = 6.
# Наступне ідеальне число - 28 = 1 + 2 + 4 + 7 + 14. Далі ідуть ідеальні числа 496 і 8128.
# def perfect_number(n):
#     result = []
#     for i in range(1, int(n ** 0.5) + 1):
#         if n % i == 0:
#             result.append(i)
#             d = int(n / i)
#             if d not in result and d != n:
#                 result.append(d)
#     result.sort()
#     return sum(result) == n
#
#
# n = 28
# print(perfect_number(n))
#*********** приклад використання функції для знаходження ідеальних чисел********************
# r = []
# for i in range(1, 100000):
#     if perfect_number(i):
#         r.append(i)
# print(r)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#661. На стадіоні є три категорії місць для сидіння: місця класу A коштують a грошових одиниць, місця класу B коштують b грошових одиниць,
# а місця класу C - c грошових одиниць. Напишіть першу функцію, яка запитує скільки продано квитків на кожний клас місць, і другу функцію,
# яка відображає суму отриманого доходу від продажу квитків на кожен клас окремо і загалом. Формати введення і виведення такі, як у вхідних і вихідних даних.
# def number_of_tickets(all_data):
#     tickets_and_class = {}
#     for i in all_data:
#         tickets_and_class[i[0]] = i[2]
#
#     return tickets_and_class
#
#
# def profit(tickets, all_data):
#     price_and_class = {}
#     for i in all_data:
#         price_and_class[i[0]] = i[1]
#
#     profit_class = {}
#     for k,v in tickets.items():
#         income = v * price_and_class[k]
#         profit_class[k] = income
#
#     return profit_class
#
#
# all_data = [['A', 20.50, 45], ['B', 15.75, 30], ['C', 10.55, 15]]
#
# tickets = number_of_tickets(all_data)
# p = profit(tickets, all_data)
#
# print((p, sum(p.values())))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#662. Напишіть функцію, яка отримує послідовність балів (цілі числа) і повертає буквенну інтерпретацію числових балів на основі наступної шкали оцінок
# 90-100 - A
# 80-89 - B
# 70-79 - C
# 60-69 - D
# Нижче 60 - F
# def literal_interpretation(pointa):
#     literal = {'A': [], 'B': [], 'C':[], 'D':[], 'F': []}
#
#     for point in points:
#         if 90 <= point <= 100:
#             literal['A'] += [point]
#         elif 80 <= point <= 89:
#             literal['B'] += [point]
#         elif 70 <= point <= 79:
#             literal['C'] += [point]
#         elif 60 <= point <= 69:
#             literal['D'] += [point]
#         elif point < 60:
#             literal['F'] += [point]
#
#     return literal
#
# points = [60, 80, 64, 45, 35, 87, 90, 95, 91, 64, 78]
# print(literal_interpretation(points))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#663. Напишіть функцію, яка перевіряє, чи рядок є паліндром чи ні. Регістр літер, пропуски і знаки пунктуації не враховувати.
# Примітка. Паліндром - це слово, фраза або послідовність, яка читається так само як зліва направо, так і справа наліво.
# def palindrome_or_not(s):
#     a = [literal.lower() for literal in s if literal.isalnum()]
#     result = ''.join(a)
#
#     return result == result[::-1]
#
#
# s = '"Was it a car or a cat I saw?"'
# print(palindrome_or_not(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#664.Напишіть функцію для сортування рядка в алфавітному порядку без врахування регістру літер.
# def alphabetical_order(s):
#     order = [l for l in s]
#     a = sorted(order, key=str.lower)
#     result = ''.join(a)
#
#     return result
#
#
# s = 'JavaScript'
# print(alphabetical_order(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#665. Напишіть функцію для сортування рядка в порядку, протилежному алфавітному, без врахування регістру літер.
# def alphabetical_order(s):
#     order = [l for l in s]
#     a = sorted(order, key=str.lower, reverse=True)
#     result = ''.join(a)
#
#     return result
#
#
# s = 'Ruby'
# print(alphabetical_order(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#666.Напишіть функцію для сортування рядка слів, розділених пропусками, за довжиною слів в порядку зростання.
# def growth(s):
#     some_dict = {word: len(word) for word in s.split()}
#     result = sorted(some_dict, key=lambda word: some_dict[word])
#     res = ' '.join(result)
#     return res
#
#
# s = 'Ruby Python Go JavaScript Java'
# print(growth(s))
#***********************OR LIKE THIS **************************************
# def growth(s):
#     result = sorted(s.split(), key= len)
#     res = ' '.join(result)
#     return res
#
#
# s = 'Ruby Python Go JavaScript Java'
# print(growth(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#667. Напишіть функцію для сортування рядка слів, розділених пропусками, за довжиною слів в порядку зменшення.
# def growth(s):
#     some_dict = {word: len(word) for word in s.split()}
#     result = sorted(some_dict, key=lambda word: some_dict[word], reverse=True)
#     res = ' '.join(result)
#     return res
#
#
# s = 'Ruby Python Go JavaScript Java'
# print(growth(s))
#***********************OR LIKE THIS **************************************
# def growth(s):
#     result = sorted(s.split(), key= len, reverse=True)
#     res = ' '.join(result)
#     return res
#
#
# s = 'Ruby Python Go JavaScript Java'
# print(growth(s))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#668. Напишіть функцію, яка створює комбінацію із двох послідовностей цілих чисел, впорядковану за зростанням.
# def together(lst1, lst2):
#     result = list(heapq.merge(sorted(lst1), sorted(lst2)))
#     return result
#
#
# lst1 = [1, 4, 0, 12, 4, 5]
# lst2 = [24, 1, 2, 10, 8]
# print(*together(lst1, lst2))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#669. Напишіть функцію, яка створює комбінацію двох послідовностей таким чином як у вихідних даних.
# def together(lst1, lst2):
#     res = list(zip(lst1, lst2))
#     result = []
#     for i in res:
#         for w in i:
#             result.append(str(w))
#     g = ' '.join(result)
#     return g
#
# lst1 = [1, 2, 3, 4, 5]
# lst2 = ['a', 'b', 'c', 'd', 'e']
# print(together(lst1, lst2))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#670. Дано список кортежів, кожен з яких містить два значення: назва фільму (рядок) і рейтинг (дійсне число).
# Напишіть функцію(ї) для сортування кортежів в порядку зростання рейтингу.
# def rating(movie):
#     return sorted(movie, key= lambda x: x[1])
#
#
# movie = [('Avengers: Endgame', 8.7), ('Toy Story 4', 8.2), ('Aladdin', 7.4),('Captain Marvel', 7.0)]
# print(rating(movie))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#671. Напишіть функцію для обчислення факторіала заданого числа.
# def factorial(n):
#     result = 1
#     for number in range(1, n+1):
#         result *= number
#
#     return result
#
#
# print(factorial(5))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#672. Напишіть функцію для перевертання кожного слова у введеному тексті.
# def turning_over(s):
#     return ' '.join(word[::-1] for word in s.split())
#
#
# print(turning_over('oN ,nomel on nolem'))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#673. Напишіть функцію для перевірки, чи є даний рядок анаграмою іншого рядка.
# Букви початкового рядка використовуються одноразово і враховується регістр літер.
# Примітка. Анаграма - переставлення літер у слові, завдяки чому утворюється нове значення слова.
# def anagram_or_not(a, b):
#     first_dict = {letter: a.count(letter) for letter in a if letter.isalnum()}
#     second_dict = {letter: b.count(letter) for letter in b if letter.isalnum()}
#     return first_dict == second_dict
#
#
# a = 'I am Lord Voldemort'
# b = 'tom marVoLo rIddle'
# print(anagram_or_not(a,b))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#674. Напишіть функцію для знаходження кількість повторень елементів у послідовності, які вводяться через кому в один рядок,
# і виведіть список пар «елемент- кількість повторень» в порядку спадання кількості повторень як у вихідних даних.
# def repet_of_elements(numbers):
#     lst = [el for el in numbers.split(',')]
#     result = set()
#
#     for num in lst:
#         result.add((int(num), lst.count(num)))
#     res = [i for i in result]
#
#     return sorted(res, key= lambda x: x[1], reverse=True)
#
#
# numbers = '1,2,3,4,3,3,2,4,5,6,1,2,3,4,6,1,2,3,4,6,6'
# print(repet_of_elements(numbers))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#675. Напишіть функцію для перевірки чи є послідовність цілих чисел арифметичною прогресією чи ні. Примітка.
# У математиці арифметична прогресія або арифметична послідовність - це послідовність чисел, в якій різниця між
# послідовними членами є постійною. Наприклад, послідовність 5, 7, 9, 11, 13, 15,... є арифметичною прогресією із загальною різницею 2.
# def arithmetic_progression(lst):
#     first_difference = lst[1] - lst[0]
#
#     for i in range(1, len(lst)):
#         difference = lst[i] - lst[i-1]
#         if first_difference == difference:
#             continue
#         else:
#             break
#     return first_difference == difference
#
#
# lst = [5, 7, 9, 11]
# print(arithmetic_progression(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#676. Напишіть функцію для перевірки чи є послідовність чисел геометричної прогресією чи ні.
# Примітка. У математиці геометрична прогресія або геометрична послідовність є послідовністю чисел,
# де кожний елемент після першого знайдений шляхом множення попереднього на фіксовану, ненульову кількість,
# що називається загальним співвідношенням. Наприклад, послідовність 2, 6, 18, 54,... є геометричною прогресією з загальним співвідношенням 3.
# Аналогічно, 10, 5, 2.5, 1.25,... є геометричною послідовністю з загальним співвідношенням 1/2.
# def geometric_progression(lst):
#     first_difference = lst[1] / lst[0]
#
#     for i in range(1, len(lst)):
#         difference = lst[i] / lst[i-1]
#         if first_difference != difference:
#             return first_difference == difference
#
#     return first_difference == difference
#
#
# lst = [2, 6, 18, 54]
# print(geometric_progression(lst))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#677. Напишіть лямбда-функцію для визначення кореня квадратного з цілого числа.
# fun = lambda x: x ** 0.5
# print(f'{fun(2):.2f}')
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#678. Напишіть лямбда-функцію, яка повертає значення куба цілого числа.
# fun = lambda x: x ** 3
# print(fun(4))
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#679. Напишіть функцію, яка виконує ділення двох цілих чисел (числа вводяться в одному рядку через пропуск.).
# Необхідно написати програму, яка запускає цю функцію, і, у разі помилки (ділення на нуль),
# генерується виняток ZeroDivisionError і виводить його ім’я як у вихідних даних.
# В разі успішної дії ділення, має виводитись результат і повідомлення OK.
# У будь-якому випадку в кінці роботи програми виводиться повідомлення Done.
# def division(a, b):
#     try:
#         print(a / b)
#         print('OK')
#
#     except ZeroDivisionError:
#         print('ZeroDivisionError')
#     print('DONE')
#
#
# division(10, 2)
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#680. Напишіть функцію, яка приймає три рядки в якості аргументів: start_message, error_message, end_message.
# Функція повинна запитувати у користувача введення до тих пір, поки не буде введено ціле число (рядок, який конвертується функцією int без помилок).
# Перед першим запитом введення повинен бути виведене значення start_message, після кожного помилкового введення потрібно виводити
# значення рядка error_message і при вдалому введенні потрібно вивести рядок end_message і повернути отримане ціле число з функції.
# Кожне повідомлення повинно знаходитися на окремому рядку. Гарантовано, що в якийсь момент користувачем буде введено ціле число.














































































































































































































